	while (y < mlx.axes.y_extrem)
	{
		x = 0;
		while (x < mlx.axes.x_extrem)
		{
			a.x = ((x * mlx.zoom) + mlx.x_pos);
			a.y = ((y * mlx.zoom) + mlx.y_pos);
			b.x = (((x + 1) * mlx.zoom) + mlx.x_pos);
			b.y = ((y * mlx.zoom) + mlx.y_pos);
			if (x < mlx.axes.x_extrem - 1)
				draw_one_line(a, b, mlx);
			b.x = ((x * mlx.zoom) + mlx.x_pos);
			b.y = (((y + 1) * mlx.zoom) + mlx.y_pos);
			if (y < mlx.axes.y_extrem - 1)
				draw_one_line(a, b, mlx);
			x++;
		}
		y++;
	}

		while (x < mlx.axes.x_extrem)
		{
			a.x = x;
			a.y = y;
			b.x = (x + 1);
			b.y = y;
			if (x < mlx.axes.x_extrem - 1)
				draw_one_line(a, b, mlx);
			b.x = x;
			b.y = (y + 1);
			if (y < mlx.axes.y_extrem - 1)
				draw_one_line(a, b, mlx);
			x++;
		}


	x_moving = x_transfo(a.x, a.y, mlx);
	y_moving = y_transfo(a.y, a.x, mlx);
	if (abs(b.x - a.x) > abs(b.y - a.y))
		steps = abs(x_transfo(b.x, b.y, mlx) - x_transfo(a.x, a.y, mlx));
	else 
		steps = abs(y_transfo(b.y, b.x, mlx) - y_transfo(a.y, a.x, mlx));
	a.i_x = (float)(x_transfo(b.x, b.y, mlx) - x_transfo(a.x, a.y, mlx)) / (float)steps;
	a.i_y = (float)(y_transfo(b.y, b.x, mlx) - y_transfo(a.y, a.x, mlx)) / (float)steps;
	while (i <= steps)
	{
		put_my_pixel(&mlx.img, (int)x_moving + mlx.x_pos, (int)y_moving + mlx.y_pos, COLOR_DEFAULT);
		x_moving += a.i_x;
		y_moving += a.i_y;
		i++;
	}
}